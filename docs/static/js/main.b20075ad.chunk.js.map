{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","submitButtonEl","useRef","useState","ws","setWs","isConnected","setIsConnected","myMessageInput","setMyMessageInput","messages","setMessages","exceptionMessage","setExceptionMessage","enterHandler","useCallback","e","code","current","click","useEffect","document","addEventListener","removeEventListener","className","type","ref","onClick","socket","io","on","data","value","onChange","target","emit","map","message","index","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0UA0EeA,MAtEf,WACE,IAAMC,EAAiBC,iBAAO,MADjB,EAEOC,qBAFP,mBAENC,EAFM,KAEFC,EAFE,OAGyBF,oBAAkB,GAH3C,mBAGNG,EAHM,KAGOC,EAHP,OAI+BJ,mBAAiB,IAJhD,mBAINK,EAJM,KAIUC,EAJV,OAKmBN,mBAAmB,IALtC,mBAKNO,EALM,KAKIC,EALJ,OAMmCR,mBAAiB,IANpD,mBAMNS,EANM,KAMYC,EANZ,KAQPC,EAAeC,uBAAY,SAACC,GACP,IAAD,EAAT,UAAXA,EAAEC,OAIJ,QAAC,EAAAhB,EAAeiB,eAAhB,SAAoDC,WAErD,IAsCH,OApCAC,qBAAU,WAER,OADAC,SAASC,iBAAiB,UAAWR,GAC9B,WACLO,SAASE,oBAAoB,UAAWT,OAkC1C,yBAAKU,UAAU,QACXlB,GAAe,4BAAQmB,KAAK,SAASC,IAAKzB,EAAgB0B,QA/BzC,WACrB,IAAMC,EAASC,IAAG,iCAElBD,EAAOE,GAAG,WAAW,WACnBvB,GAAe,MAEjBqB,EAAOE,GAAG,WAAW,SAACC,GACpBpB,EAAY,GAAD,mBAAKD,GAAL,CAAeqB,QAE5BH,EAAOE,GAAG,aAAa,SAACC,GACtBlB,EAAoBkB,MAEtBH,EAAOE,GAAG,cAAc,WACtBjB,EAAoB,mBAEtBR,EAAMuB,KAgBa,WAChBhB,EACAN,GACC,oCACE,2BAAOmB,KAAK,OAAOO,MAAOxB,EAAgByB,SAjB1B,SAAC,GAAD,IAAaD,EAAb,EAAGE,OAAUF,MAAb,OAAgCvB,EAAkBuB,MAkBlE,4BAAQP,KAAK,SAASC,IAAKzB,EAAgB0B,QAjBxB,WACzBvB,EAAG+B,KAAK,UAAW3B,GAKnBC,EAAkB,IAClBE,EAAY,GAAD,mBAAKD,GAAL,CAAeF,OAUpB,QACA,6BACGE,EAAS0B,KAAI,SAACC,EAASC,GAAV,OAAoB,yBAAKC,IAAKD,GAAQD,UCtD5CG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlB,c","file":"static/js/main.b20075ad.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const submitButtonEl = useRef(null);\r\n  const [ws, setWs] = useState();\r\n  const [isConnected, setIsConnected] = useState<boolean>(false);\r\n  const [myMessageInput, setMyMessageInput] = useState<string>('');\r\n  const [messages, setMessages] = useState<string[]>([]);\r\n  const [exceptionMessage, setExceptionMessage] = useState<string>('');\r\n\r\n  const enterHandler = useCallback((e: any) => {\r\n    if (e.code === 'Enter') {\r\n      // DOM document.querySelector('button')?.click();\r\n      // react js submitButtonEl.current?.click();\r\n      // react ts\r\n      (submitButtonEl.current as unknown as HTMLElement)?.click();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', enterHandler);\r\n    return () => {\r\n      document.removeEventListener('keydown', enterHandler);\r\n    };\r\n  });\r\n\r\n  const onClickConnect = () => {\r\n    const socket = io('http://boseok.iptime.org:3001');\r\n    \r\n    socket.on('connect', () => {\r\n      setIsConnected(true);\r\n    });\r\n    socket.on('message', (data: any) => {\r\n      setMessages([...messages, data]);\r\n    });\r\n    socket.on('exception', (data: any) => {\r\n      setExceptionMessage(data);\r\n    });\r\n    socket.on('disconnect', () => {\r\n      setExceptionMessage('Disconnected');\r\n    });\r\n    setWs(socket);\r\n  }\r\n\r\n  const onChangeMessage = ({ target: { value } }: any) => setMyMessageInput(value);\r\n  const onClickSendMessage = () => {\r\n    ws.emit('message', myMessageInput,\r\n      // (response: string) => {\r\n      //   console.log(response);\r\n      // }\r\n    );\r\n    setMyMessageInput('');\r\n    setMessages([...messages, myMessageInput]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!isConnected && <button type=\"submit\" ref={submitButtonEl} onClick={onClickConnect}>connect</button>}\r\n      {exceptionMessage}\r\n      {isConnected &&\r\n        <>\r\n          <input type=\"text\" value={myMessageInput} onChange={onChangeMessage} />\r\n          <button type=\"submit\" ref={submitButtonEl} onClick={onClickSendMessage}>send</button>\r\n          <div>\r\n            {messages.map((message, index) => <div key={index}>{message}</div>)}\r\n          </div>\r\n        </>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}